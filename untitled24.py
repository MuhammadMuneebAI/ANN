# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g6WPDNpDFJVcjFqBWLS3G_O17GboUtpN
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, accuracy_score

st.title("AI Health Advisor (Parkinson's Disease Detection App)")

model = None
scaler = None
features_used = []

# Load the embedded dataset
DATA_PATH = "Parkinsonâ€™s Disease Detection dataset.csv"
df = pd.read_csv(DATA_PATH)
st.write("### Dataset Preview:", df.head())

if 'status' not in df.columns:
    st.error("Dataset must include a 'status' column (target variable).")
else:
    # Keep only numeric columns and drop rows with NaNs
    df = df.select_dtypes(include=[np.number]).dropna()

    if 'status' not in df.columns:
        st.error("After cleaning, 'status' column is missing. Ensure it is numeric and present.")
    else:
        # Use top 3 correlated features with 'status'
        corr_matrix = df.corr()
        top_features = corr_matrix['status'].abs().sort_values(ascending=False).index[1:4].tolist()

        X = df[top_features]
        y = df['status']

        # Standardize features
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Train/Test Split
        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

        # Train MLP Classifier
        model = MLPClassifier(hidden_layer_sizes=(10, 5), max_iter=1000, random_state=42)
        model.fit(X_train, y_train)

        y_pred = model.predict(X_test)
        st.write("### Model Performance")
        st.write("Accuracy:", accuracy_score(y_test, y_pred))
        st.text(classification_report(y_test, y_pred))

        features_used = top_features

        st.sidebar.header("Manual Input for Prediction")
        user_input = []
        for feature in features_used:
            val = st.sidebar.number_input(f"Enter {feature}", float(df[feature].min()), float(df[feature].max()))
            user_input.append(val)

        if st.sidebar.button("Predict"):
            user_input_scaled = scaler.transform([user_input])
            prediction = model.predict(user_input_scaled)[0]
            prediction_proba = model.predict_proba(user_input_scaled)[0]

            result = "Parkinson's Disease Detected" if prediction == 1 else "No Parkinson's Disease Detected"
            st.write(f"## Prediction: {result}")
            st.write("### Prediction Probabilities")
            st.write({
                "No Parkinson's": round(prediction_proba[0], 3),
                "Parkinson's": round(prediction_proba[1], 3)
            })